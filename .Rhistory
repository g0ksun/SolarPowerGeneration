p2we <- read_csv("Plant_2_Weather_Sensor_Data.csv")
library(tidyverse)
library(dplyr)
library(skimr)
library(janitor)
install.packages(janitor)
install.packages("janitor")
library(janitor)
library(tidyverse)
library(dplyr)
library(skimr)
library(janitor)
library(here)
install.packages("here")
library(tidyverse)
library(dplyr)
library(skimr)
library(janitor)
library(here)
library(RColorBrewer)
library(plotly)
install.packages("plotly")
library(tidyverse)
library(dplyr)
library(skimr)
library(janitor)
library(here)
library(RColorBrewer)
library(plotly)
library(psych)
install.packages("psych")
library(tidyverse)
library(dplyr)
library(skimr)
library(janitor)
library(here)
library(RColorBrewer)
library(plotly)
library(psych)
library(lubridate)
library(gridExtra)
install.packages("gridExtra")
library(tidyverse)
library(dplyr)
library(skimr)
library(janitor)
library(here)
library(RColorBrewer)
library(plotly)
library(psych)
library(lubridate)
library(gridExtra)
library(htmlwidgets)
library(IRdisplay)
install.packages("IRdisplay")
library(tidyverse)
library(dplyr)
library(skimr)
library(janitor)
library(here)
library(RColorBrewer)
library(plotly)
library(psych)
library(lubridate)
library(gridExtra)
library(htmlwidgets)
library(IRdisplay)
p1gen <- p1gen %>%
clean_names(case = "lower_camel")
p2gen <- p2gen %>%
clean_names(case = "lower_camel")
p1we <- p1we %>%
clean_names(case = "lower_camel")
p2we <- p2we %>%
clean_names(case = "lower_camel")
p1gen <- p1gen %>%
mutate(dateTime = dmy_hm(dateTime))
p1gen <- p1gen %>%
mutate(time = format(dateTime, format = "%H:%M")) %>%
mutate(date = date(dateTime))
p2gen <- p2gen %>%
mutate(time = format(dateTime, format = "%H:%M")) %>%
mutate(date = date(dateTime))
p2we <- p2we %>%
mutate(time = format(dateTime, format = "%H:%M")) %>%
mutate(date = date(dateTime))
p1we <- p1we %>%
mutate(time = format(dateTime, format = "%H:%M")) %>%
mutate(date = date(dateTime))
p1gen <- p1gen %>%
mutate(electrical_eff = if_else(dcPower == 0 | acPower == 0, 0, (acPower/dcPower)*100))
p2gen <- p2gen %>%
mutate(electrical_eff = if_else(dcPower == 0 | acPower == 0, 0, (acPower/dcPower)*100))
p1gen %>%
ggplot() +
geom_point(aes(x = acPower, y = dcPower, color = sourceKey)) +
labs(title = "Relationship between Ac and Dc Power", caption = "Solar India", x = "Ac Power", y = "Dc Power")
p1gen %>%
ggplot() +
geom_point(aes(x = time, y = dcPower), color = "#ffb100") +
geom_point(aes(x = time, y = acPower), color = "#4095a5") +
labs(title = "Dc Power and Ac Power generated for Plant 1", caption = "Solar India 2020", x = "Time of the Day", y = "Power Generated") +
theme(axis.text.x = element_text(angle = 90, face = "bold", size = 5))
p2gen %>%
ggplot() +
geom_point(aes(x = time, y = dcPower), color = "#ffb100") +
geom_point(aes(x = time, y = acPower), color = "#4095a5") +
labs(title = "Dc and Ac Power generated by Plant 2", caption = "Solar India 2020", x = "Time of the day", y = "Power Generated") +
theme(axis.text.x = element_text(angle = 90, face = "bold", size = 5))
# Calculating the Ac and Dc Power generated and daily yields for the two plants.
p1gen %>%
group_by(date, sourceKey) %>%
summarize(dc_power = sum(dcPower),ac_power = sum(acPower), daily_yield = max(dailyYield)) %>%
head(10)
p2gen %>%
group_by(date, sourceKey) %>%
summarize(dc_power = sum(dcPower),ac_power = sum(acPower), daily_yield = max(dailyYield)) %>%
head(10)
# Correcting the Dc Power for Plant 1.
p1gen <- p1gen %>%
mutate(dcPower = dcPower/10)
# Recalculating the Electrical Efficiency.
p1gen <- p1gen %>%
mutate(electrical_eff = if_else(dcPower == 0 | acPower == 0, 0, (acPower/dcPower)*100))
colSums(is.na(p1gen))
colSums(is.na(p1we))
colSums(is.na(p2gen))
colSums(is.na(p2we))
# Inspecting the dataframes.
skim(p1gen)
skim(p2gen)
skim(p1we)
skim(p2we)
# Filtering out values having electrical efficiency > 100%.
p2gen <- p2gen %>%
filter(dcPower >= acPower)
p1gen <- p1gen %>%
filter(dcPower >= acPower)
# Removing sourceKeys from the weather sensor data since all of the rows contain the same source key.
p1we <- p1we %>%
select(-sourceKey)
p2we <- p2we %>%
select(-sourceKey)
plant1_by_yield <- p1gen %>%
group_by(date, sourceKey) %>%
summarize(yield = max(dailyYield))
# Daily yield for Plant 2.
plant2_by_yield <- p2gen %>%
group_by(date, sourceKey) %>%
summarize(yield = max(dailyYield))
# Storing the sourceKeys in different variables.
# For first plant.
first11_inv_1 <- plant1_by_yield[1:11,2]
last11_inv_1 <- plant1_by_yield[12:22,2]
# For second plant.
first11_inv_2 <- plant2_by_yield[1:11,2]
last11_inv_2 <- plant2_by_yield[12:22,2]
pairs.panels(p1we[3:5],
smooth = FALSE,
density = FALSE,
main = "Plot showing the correlation between different parameters of Plant 1")
# For plant 2
pairs.panels(p2we[3:5],
smooth = FALSE,
density = FALSE,
main = "Plot showing the correlation between different parameters of Plant 2")
p1gen %>%
filter(sourceKey %in% unlist(first11_inv_1)) %>%
group_by(time, sourceKey) %>%
summarize(dc_power = sum(dcPower)) %>%
ggplot(aes(x = time, y = dc_power,group = sourceKey)) +
geom_line(aes(color = sourceKey)) +
scale_color_brewer(palette = "Paired") +
theme(axis.text.x = element_text(face = "bold", angle = 90, size = 7), legend.position =  c(0.9,0.6))
p1gen %>%
filter(sourceKey %in% unlist(first11_inv_1)) %>%
group_by(time, sourceKey) %>%
summarize(dc_power = sum(dcPower)) %>%
ggplot(aes(x = time, y = dc_power,group = sourceKey)) +
geom_line(aes(color = sourceKey), size= 1.1) +
scale_color_brewer(palette = "Paired") +
theme(axis.text.x = element_text(face = "bold", angle = 90, size = 6), legend.position =  c(0.9,0.6))
#
p1gen %>%
filter(sourceKey %in% unlist(first11_inv_1)) %>%
group_by(time, sourceKey) %>%
summarize(dc_power = sum(dcPower)) %>%
ggplot(aes(x = time, y = dc_power,group = sourceKey)) +
geom_line(aes(color = sourceKey,)  size = 1) +
p1gen %>%
filter(sourceKey %in% unlist(last11_inv_1)) %>%
group_by(time, sourceKey) %>%
summarize(dc_power = sum(dcPower)) %>%
ggplot(aes(x = time, y = dc_power,group = sourceKey)) +
geom_line(aes(color = sourceKey)) +
scale_color_brewer(palette = "Paired") +
theme(axis.text.x = element_text(face = "bold", angle = 90, size = 7), legend.position =  c(0.9,0.6))
p1gen %>%
filter(sourceKey == "1BY6WEcLGh8j5v7") %>%
group_by(date, time, sourceKey, dailyYield) %>%
summarize(dc_power = sum(dcPower)) %>%
ggplot() +
geom_line(aes(x = time, y = dc_power,group = 1), color = "#ffb100") +
labs(title = "Dc Power Received by the Inverter 1BY6WEcLGh8j5v7", x = "Time", y = "Dc Power Generated") +
facet_wrap(~date) +
theme_bw()
plant1 <- plot_ly(data, labels = ~sourceKey, values = ~DcPower, type = 'pie')  %>%
layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
data <- p1gen %>%
group_by(sourceKey) %>%
summarize(DcPower = sum(dcPower))
data_1 <- p2gen %>%
group_by(sourceKey) %>%
summarize(DcPower = sum(dcPower))
plant1 <- plot_ly(data, labels = ~sourceKey, values = ~DcPower, type = 'pie')  %>%
layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
saveWidget(plant1, 'DC Power Received in Different Inverters in Plant1.html')
display_html('<iframe src="DC Power Received in Different Inverters in Plant1.html" width=100% height=400></iframe>')
library(plotly)
plant1 <- plot_ly(data, labels = ~sourceKey, values = ~DcPower, type = 'pie') %>%
layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
saveWidget(plant1, 'DC Power Received in Different Inverters in Plant1.html')
display_html('<iframe src="DC Power Received in Different Inverters in Plant1.html" width=100% height=400></iframe>')
data <- plant1_gen %>%
group_by(sourceKey) %>%
summarize(DcPower = sum(dcPower))
plant1_comb <- inner_join(p1gen, p1we, by = "dateTime")
# Joining the two tables for Plant 2.
plant2_comb <- inner_join(p2gen, p2we, by = "dateTime")
plant1_comb <- plant1_comb %>%
select(-c(time.x,date.x,plantId.y,electrical_eff))
plant2_comb <- plant2_comb %>%
select(-c(time.x,date.x,plantId.y, electrical_eff))
pairs.panels(plant1_comb[4:10],
density = FALSE,
smooth = FALSE,
main = "Pair plots for Plant 1")
pairs.panels(plant2_comb[4:10],
density = FALSE,
smooth = FALSE,
main = "Pair plots for Plant 2")
p1we %>%
select(date, time, ambientTemperature, moduleTemperature) %>%
ggplot() +
geom_line(aes(x = time, y = moduleTemperature,group = 1),color = "#ffb100", size = 0.7, linetype = "solid") +
geom_line(aes(x = time, y = ambientTemperature,group = 2),color = "#4095A5", size = 0.7, linetype = "dashed") +
geom_hline(yintercept = 50, linetype = "solid", color = "salmon") +
scale_y_continuous(name = "Temperature", labels = c(0,20,40,60), breaks = c(0,20,40,60) ) +
labs(title = "The Ambient and Module Temperature recorded in Plant 1") +
facet_wrap(~date)
p1we %>%
select(date, time, ambientTemperature, moduleTemperature) %>%
ggplot() +
geom_line(aes(x = time, y = moduleTemperature,group = 1),color = "#ffb100", size = 0.9, linetype = "solid") +
geom_line(aes(x = time, y = ambientTemperature,group = 2),color = "#4095A5", size = 0.9, linetype = "dashed") +
geom_hline(yintercept = 50, linetype = "solid", color = "salmon", size =1.1) +
geom_hline(yintercept = 35, linetype = "solid", color = "salmon",size= 1.1)+
scale_y_continuous(name = "Temperature", labels = c(0,20,40,60), breaks = c(0,20,40,60) ) +
labs(title = "The Ambient and Module Temperature recorded in Plant 1") +
facet_wrap(~date)
p1we %>%
select(date, time, ambientTemperature, moduleTemperature) %>%
ggplot() +
geom_line(aes(x = time, y = moduleTemperature,group = 1),color = "#ffb100", size = 0.9, linetype = "solid") +
geom_line(aes(x = time, y = ambientTemperature,group = 2),color = "#4095A5", size = 0.9, linetype = "dashed") +
geom_hline(yintercept = 50, linetype = "solid", color = "salmon", size =0.9) +
geom_hline(yintercept = 35, linetype = "solid", color = "salmon",size= 0.9)+
scale_y_continuous(name = "Temperature", labels = c(0,20,40,60), breaks = c(0,20,40,60) ) +
labs(title = "The Ambient and Module Temperature recorded in Plant 1") +
facet_wrap(~date)
p2we %>%
select(date, time, ambientTemperature, moduleTemperature) %>%
ggplot() +
geom_line(aes(x = time, y = moduleTemperature,group = 1),color = "#ffb100", size = 0.9, linetype = "solid") +
geom_line(aes(x = time, y = ambientTemperature,group = 2),color = "#4095A5", size = 0.9, linetype = "dashed") +
geom_hline(yintercept = 50, linetype = "solid", color = "salmon", size =1.1) +
geom_hline(yintercept = 35, linetype = "solid", color = "salmon",size= 1.1)+
scale_y_continuous(name = "Temperature", labels = c(0,20,40,60), breaks = c(0,20,40,60) ) +
labs(title = "The Ambient and Module Temperature recorded in Plant 1") +
facet_wrap(~date)
p2we %>%
select(date, time, ambientTemperature, moduleTemperature) %>%
ggplot() +
geom_line(aes(x = time, y = moduleTemperature,group = 1),color = "#ffb100", size = 0.9, linetype = "solid") +
geom_line(aes(x = time, y = ambientTemperature,group = 2),color = "#4095A5", size = 0.9, linetype = "dashed") +
geom_hline(yintercept = 50, linetype = "solid", color = "salmon", size =1.1) +
geom_hline(yintercept = 35, linetype = "solid", color = "salmon",size= 1.1)+
scale_y_continuous(name = "Sıcaklık", labels = c(0,20,40,60), breaks = c(0,20,40,60) ) +
labs(title = "Plant 2 - Ortam ve Modül Sıcaklık") +
facet_wrap(~date)
p2we %>%
select(date, time, ambientTemperature, moduleTemperature) %>%
ggplot() +
geom_line(aes(x = time, y = moduleTemperature,group = 1),color = "#ffb100", size = 0.9, linetype = "solid") +
geom_line(aes(x = time, y = ambientTemperature,group = 2),color = "#4095A5", size = 0.9, linetype = "dashed") +
geom_hline(yintercept = 50, linetype = "solid", color = "salmon", size =0.8) +
geom_hline(yintercept = 35, linetype = "solid", color = "salmon",size= 0.8)+
scale_y_continuous(name = "Sıcaklık", labels = c(0,20,40,60), breaks = c(0,20,40,60) ) +
labs(title = "Plant 2 - Ortam ve Modül Sıcaklık") +
facet_wrap(~date)
p1we %>%
select(date, time, ambientTemperature, moduleTemperature) %>%
ggplot() +
geom_line(aes(x = time, y = moduleTemperature,group = 1),color = "#ffb100", size = 0.9, linetype = "solid") +
geom_line(aes(x = time, y = ambientTemperature,group = 2),color = "#4095A5", size = 0.9, linetype = "dashed") +
geom_hline(yintercept = 50, linetype = "solid", color = "salmon", size =0.8) +
geom_hline(yintercept = 35, linetype = "solid", color = "salmon",size= 0.8)+
scale_y_continuous(name = "Sıcaklık", labels = c(0,20,40,60), breaks = c(0,20,40,60) ) +
labs(title = "Plant 1 - Ortam ve Modül Sıcaklık") +
facet_wrap(~date)
View(p1gen)
View(plant2_comb)
View(plant1_comb)
df2 <- plant1_comb
X <- df2[, c('dailyYield', 'totalYield', 'ambientTemperature', 'moduleTemperature', 'irradition', 'dcPower')]
df2 <- plant1_comb
X <- df2[, c('dailyYield', 'totalYield', 'ambientTemperature', 'moduleTemperature', 'irradiation', 'dcPower')]
y <- df2$acPower
head(5)
head(X,5)
head(y,5)
head(Y,5)
library(caret)
install.packages("caret")
library(caret)
set.seed(21)
train_indices <- createDataPartition(y, p = 0.8, list = FALSE)
X_train <- X[train_indices, ]
X_test <- X[-train_indices, ]
y_train <- y[train_indices]
y_test <- y[-train_indices]
library(caretEnsemble)
install.packages("caretEnsemble")
#lineerregresyon
library(caretEnsemble)
lr_clf <- train(X_train, y_train, method = "lm")
y_pred_lr <- predict(lr_clf, X_test)
score_lr <- R2(y_pred_lr, y_test) * 100
print(paste("LR Model score =", round(score_lr, 4), "%", sep = " "))
warnings()
lr <- lm(y_train ~ ., data = X_train)
y_pred_lr <- predict(lr, newdata = X_test)
R2_Score_lr <- round(caret::R2(y_pred_lr, y_test) * 100, 2)
print(paste("R2 Score:", R2_Score_lr, "%"))
library(randomForest)
install.packages("randomForest")
library(randomForest)
rfr <- randomForest(X_train, y_train)
y_pred_rfr <- predict(rfr, newdata = X_test)
R2_Score_rfr <- round(caret::R2(y_pred_rfr, y_test) * 100, 2)
print(paste("R2 Score:", R2_Score_rfr, "%"))
#kararağacı
dtr <- rpart(y_train ~ ., data = X_train)
library(rpart, lib.loc = "C:/Program Files/R/R-4.3.0/library")
#kararağacı
dtr <- rpart(y_train ~ ., data = X_train)
y_pred_dtr <- predict(dtr, newdata = X_test)
R2_Score_dtr <- round(caret::R2(y_pred_dtr, y_test) * 100, 2)
print(paste("R2 Score:", R2_Score_dtr, "%"))
prediction <- predict(rfr, newdata = X_test)
print(prediction)
view(prediction)
wiev(prediction)
library(tidyverse)
view(prediction)
check <- data.frame(Actual = y_test, Predicted = prediction)
head(check, 15)
dtr <- rpart(y_train ~ ., data = X_train)
> y_pred_dtr <- predict(dtr, newdata = X_test)
library(caret)
dtr <- rpart(y_train ~ ., data = X_train)
y_pred_dtr <- predict(dtr, newdata = X_test)
R2_Score_dtr <- round(caret::R2(y_pred_dtr, y_test) * 100, 2)
print(paste("R2 Score:", R2_Score_dtr, "%"))
prediction <- predict(dtr, newdata = X_test)
print(prediction)
view(prediction)
cross_checking <- data.frame(Actual = y_test, Predicted = prediction)
head(cross_checking)
cross_checking$Error <- cross_checking$Actual - cross_checking$Predicted
head(cross_checking)
rfr <- randomForest(X_train, y_train)
y_pred_rfr <- predict(rfr, newdata = X_test)
R2_Score_rfr <- round(caret::R2(y_pred_rfr, y_test) * 100, 2)
print(paste("R2 Score:", R2_Score_rfr, "%"))
prediction <- predict(rfr, newdata = X_test)
print(prediction)
view(prediction)
cross_checking <- data.frame(Actual = y_test, Predicted = prediction)
head(cross_checking)
cross_checking$Error <- cross_checking$Actual - cross_checking$Predicted
head(cross_checking)
cross_checking_final <- subset(cross_checking, Error <= 20)
sampled_rows <- sample(nrow(cross_checking_final), 25)
cross_checking_final_sampled <- cross_checking_final[sampled_rows, ]
# Stil uygulanacak sütunları seçmek için stil işlevini tanımlama
style_fun <- function(x) {
style <- ifelse(x < 0, 'background-color: LightGreen', 'background-color: LightGreen')
style
}
# Stil uygulama ve özelliklerin belirtilmesi
styled_cross_checking_final_sampled <- styler(cross_checking_final_sampled) %>%
set_caption('Sampled Cross-Checking Data') %>%
style_selected(columns = c('Actual', 'Predicted'), style_fun = style_fun) %>%
set_formatter(columns = c('Actual', 'Predicted'), formatter = 'formatC', format = 'f', digits = 2) %>%
set_css(css = list(c('font-family', 'Lucida Calligraphy'), c('color', 'LightGreen'), c('font-size', '15px')))
library(tidyselect)
cross_checking_final <- subset(cross_checking, Error <= 20)
sampled_rows <- sample(nrow(cross_checking_final), 25)
cross_checking_final_sampled <- cross_checking_final[sampled_rows, ]
# Stil uygulanacak sütunları seçmek için stil işlevini tanımlama
style_fun <- function(x) {
style <- ifelse(x < 0, 'background-color: LightGreen', 'background-color: LightGreen')
style
}
# Stil uygulama ve özelliklerin belirtilmesi
styled_cross_checking_final_sampled <- styler(cross_checking_final_sampled) %>%
set_caption('Sampled Cross-Checking Data') %>%
style_selected(columns = c('Actual', 'Predicted'), style_fun = style_fun) %>%
set_formatter(columns = c('Actual', 'Predicted'), formatter = 'formatC', format = 'f', digits = 2) %>%
set_css(css = list(c('font-family', 'Lucida Calligraphy'), c('color', 'LightGreen'), c('font-size', '15px')))
cross_checking_final <- subset(cross_checking, Error <= 20)
sampled_rows <- sample(nrow(cross_checking_final), 25)
cross_checking_final_sampled <- cross_checking_final[sampled_rows, ]
# Stil uygulanacak sütunları seçmek için stil işlevini tanımlama
style_fun <- function(x) {
style <- ifelse(x < 0, 'background-color: LightGreen', 'background-color: LightGreen')
style
}
# Stil uygulama ve özelliklerin belirtilmesi
styled_cross_checking_final_sampled <- styler(cross_checking_final_sampled) %>%
set_caption('Sampled Cross-Checking Data') %>%
style_selected(columns = c('Actual', 'Predicted'), style_fun = style_fun) %>%
set_formatter(columns = c('Actual', 'Predicted'), formatter = 'formatC', format = 'f', digits = 2) %>%
style_css(css = list(c('font-family', 'Lucida Calligraphy'), c('color', 'LightGreen'), c('font-size', '15px')))
cross_checking_final <- subset(cross_checking, Error <= 20)
sampled_rows <- sample(nrow(cross_checking_final), 25)
cross_checking_final_sampled <- cross_checking_final[sampled_rows, ]
# Stil uygulanacak sütunları seçmek için stil işlevini tanımlama
style_fun <- function(x) {
style <- ifelse(x < 0, 'background-color: LightGreen', 'background-color: LightGreen')
style
}
# Stil uygulama ve özelliklerin belirtilmesi
styled_cross_checking_final_sampled <- cross_checking_final_sampled %>%
styler() %>%
set_caption('Sampled Cross-Checking Data') %>%
style_selected(columns = c('Actual', 'Predicted'), style_fun = style_fun) %>%
set_formatter(columns = c('Actual', 'Predicted'), formatter = 'formatC', format = 'f', digits = 2) %>%
style_css("font-family", "Lucida Calligraphy") %>%
style_css("color", "LightGreen") %>%
style_css("font-size", "15px")
View(cross_checking_final_sampled)
View(cross_checking)
View(cross_checking_final)
View(cross_checking_final_sampled)
lr <- lm(y_train ~ ., data = X_train)
y_pred_lr <- predict(lr, newdata = X_test)
R2_Score_lr <- round(caret::R2(y_pred_lr, y_test) * 100, 2)
print(paste("R2 Score:", R2_Score_lr, "%"))
prediction <- predict(lr, newdata = X_test)
print(prediction)
cross_checking <- data.frame(Actual = y_test, Predicted = prediction)
head(cross_checking)
View(cross_checking)
cross_checking$Error <- cross_checking$Actual - cross_checking$Predicted
head(cross_checking)
cross_checking_final <- cross_checking[cross_checking$Error <= 20, ]
sample_rows <- sample(nrow(cross_checking_final), 25)
cross_checking_final_sample <- cross_checking_final[sample_rows, ]
print(cross_checking_final_sample)
cross_checking_f <- cross_checking[cross_checking$Error > 20, ]
sample_r <- sample(nrow(cross_checking_f), 25)
cross_checking_f <- cross_checking[cross_checking$Error >= 20, ]
sample_r <- sample(nrow(cross_checking_f))
cross_checking_f_sample <- cross_checking_f[sample_r, ]
print(cross_checking_f_sample)
cross_checking_f <- cross_checking[cross_checking$Error >= 15, ]
> sample_r <- sample(nrow(cross_checking_f))
cross_checking_f <- cross_checking[cross_checking$Error >= 20, ]
> sample_r <- sample(nrow(cross_checking_f))
cross_checking_f <- cross_checking[cross_checking$Error >= 10, ]
sample_r <- sample(nrow(cross_checking_final))
cross_checking_f_sample <- cross_checking_f[sample_r, ]
print(cross_checking_f_sample)
cross_checking_final <- cross_checking[cross_checking$Error >= 15, ]
sample_rows <- sample(nrow(cross_checking_final), 25)
cross_checking_final <- cross_checking[cross_checking$Error >= 15, ]
sample_rows <- sample(nrow(cross_checking_final))
cross_checking_final_sample <- cross_checking_final[sample_rows, ]
print(cross_checking_final_sample)
cross_checking_final <- cross_checking[cross_checking$Error <= 10, ]
sample_rows <- sample(nrow(cross_checking_final))
cross_checking_final_sample <- cross_checking_final[sample_rows, ]
print(cross_checking_final_sample)
cross_checking_final <- cross_checking[cross_checking$Error >= 15, ]
sample_rows <- sample(nrow(cross_checking_final), 25)
cross_checking_final <- cross_checking[cross_checking$Error <= 10, ]
sample_rows <- sample(nrow(cross_checking_final),10)
cross_checking_final_sample <- cross_checking_final[sample_rows, ]
print(cross_checking_final_sample)
View(cross_checking_final_sample)
cross_checking_final <- subset(cross_checking, Error <= 20)
sampled_rows <- sample(nrow(cross_checking_final), 25)
cross_checking_final_sampled <- cross_checking_final[sampled_rows, ]
print(styled_cross_checking_final_sampled)
print(cross_checking_final_sampled)
View(cross_checking_final_sample)
View(cross_checking_final_sampled)
